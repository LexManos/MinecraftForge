--- a/net/minecraft/server/network/ServerConfigurationPacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerConfigurationPacketListenerImpl.java
@@ -41,6 +_,7 @@
 public class ServerConfigurationPacketListenerImpl extends ServerCommonPacketListenerImpl implements ServerConfigurationPacketListener, TickablePacketListener {
     private static final Logger LOGGER = LogUtils.getLogger();
     private static final Component DISCONNECT_REASON_INVALID_DATA = Component.translatable("multiplayer.disconnect.invalid_player_data");
+    private static final ConfigurationTask.Type VANILLA_START = new ConfigurationTask.Type("vanilla_start");
     private final GameProfile gameProfile;
     private final Queue<ConfigurationTask> configurationTasks = new ConcurrentLinkedQueue<>();
     @Nullable
@@ -48,11 +_,13 @@
     private ClientInformation clientInformation;
     @Nullable
     private SynchronizeRegistriesTask synchronizeRegistriesTask;
+    private final net.minecraftforge.network.config.ConfigurationTaskContext taskContext;
 
     public ServerConfigurationPacketListenerImpl(MinecraftServer p_301415_, Connection p_298106_, CommonListenerCookie p_301309_) {
         super(p_301415_, p_298106_, p_301309_);
         this.gameProfile = p_301309_.gameProfile();
         this.clientInformation = p_301309_.clientInformation();
+        this.taskContext = new net.minecraftforge.network.config.ConfigurationTaskContext(p_298106_, this::send, this::finishCurrentTask);
     }
 
     @Override
@@ -71,18 +_,23 @@
         return this.connection.isConnected();
     }
 
-    public void startConfiguration() {
+    public void vanillaStart() {
         this.send(new ClientboundCustomPayloadPacket(new BrandPayload(this.server.getServerModName())));
         ServerLinks serverlinks = this.server.serverLinks();
         if (!serverlinks.isEmpty()) {
             this.send(new ClientboundServerLinksPacket(serverlinks.untrust()));
         }
 
+        this.send(new ClientboundUpdateEnabledFeaturesPacket(FeatureFlags.REGISTRY.toNames(this.server.getWorldData().enabledFeatures())));
+    }
+
+    public void startConfiguration() {
+        net.minecraftforge.event.ForgeEventFactory.gatherLoginConfigTasks(this.connection, this.configurationTasks::add);
         LayeredRegistryAccess<RegistryLayer> layeredregistryaccess = this.server.registries();
         List<KnownPack> list = this.server.getResourceManager().listPacks().flatMap(p_326454_ -> p_326454_.location().knownPackInfo().stream()).toList();
-        this.send(new ClientboundUpdateEnabledFeaturesPacket(FeatureFlags.REGISTRY.toNames(this.server.getWorldData().enabledFeatures())));
         this.synchronizeRegistriesTask = new SynchronizeRegistriesTask(list, layeredregistryaccess);
         this.configurationTasks.add(this.synchronizeRegistriesTask);
+        this.configurationTasks.add(new net.minecraftforge.network.config.SimpleConfigurationTask(VANILLA_START, this::vanillaStart));
         this.addOptionalTasks();
         this.configurationTasks.add(new JoinWorldTask());
         this.startNextTask();
@@ -125,7 +_,7 @@
     public void handleConfigurationFinished(ServerboundFinishConfigurationPacket p_297811_) {
         PacketUtils.ensureRunningOnSameThread(p_297811_, this, this.server);
         this.finishCurrentTask(JoinWorldTask.TYPE);
-        this.connection.setupOutboundProtocol(GameProtocols.CLIENTBOUND_TEMPLATE.bind(RegistryFriendlyByteBuf.decorator(this.server.registryAccess())));
+        this.connection.setupOutboundProtocol(GameProtocols.CLIENTBOUND_TEMPLATE.bind(RegistryFriendlyByteBuf.decorator(this.server.registryAccess(), this.connection)));
 
         try {
             PlayerList playerlist = this.server.getPlayerList();
@@ -161,7 +_,7 @@
             ConfigurationTask configurationtask = this.configurationTasks.poll();
             if (configurationtask != null) {
                 this.currentTask = configurationtask;
-                configurationtask.start(this::send);
+                configurationtask.start(this.taskContext);
             }
         }
     }
